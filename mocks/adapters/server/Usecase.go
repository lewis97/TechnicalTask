// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	accounts "github.com/lewis97/TechnicalTask/internal/usecases/accounts"

	entities "github.com/lewis97/TechnicalTask/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"

	transactions "github.com/lewis97/TechnicalTask/internal/usecases/transactions"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

type Usecase_Expecter struct {
	mock *mock.Mock
}

func (_m *Usecase) EXPECT() *Usecase_Expecter {
	return &Usecase_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: ctx, input, repo
func (_m *Usecase) CreateAccount(ctx context.Context, input *accounts.CreateAccountInput, repo *accounts.AccountUsecaseRepos) (entities.Account, error) {
	ret := _m.Called(ctx, input, repo)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounts.CreateAccountInput, *accounts.AccountUsecaseRepos) (entities.Account, error)); ok {
		return rf(ctx, input, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounts.CreateAccountInput, *accounts.AccountUsecaseRepos) entities.Account); ok {
		r0 = rf(ctx, input, repo)
	} else {
		r0 = ret.Get(0).(entities.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounts.CreateAccountInput, *accounts.AccountUsecaseRepos) error); ok {
		r1 = rf(ctx, input, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type Usecase_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - input *accounts.CreateAccountInput
//   - repo *accounts.AccountUsecaseRepos
func (_e *Usecase_Expecter) CreateAccount(ctx interface{}, input interface{}, repo interface{}) *Usecase_CreateAccount_Call {
	return &Usecase_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, input, repo)}
}

func (_c *Usecase_CreateAccount_Call) Run(run func(ctx context.Context, input *accounts.CreateAccountInput, repo *accounts.AccountUsecaseRepos)) *Usecase_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounts.CreateAccountInput), args[2].(*accounts.AccountUsecaseRepos))
	})
	return _c
}

func (_c *Usecase_CreateAccount_Call) Return(_a0 entities.Account, _a1 error) *Usecase_CreateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_CreateAccount_Call) RunAndReturn(run func(context.Context, *accounts.CreateAccountInput, *accounts.AccountUsecaseRepos) (entities.Account, error)) *Usecase_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTransaction provides a mock function with given fields: ctx, input, repo
func (_m *Usecase) CreateTransaction(ctx context.Context, input *transactions.CreateTransactionInput, repo *transactions.TransactionsUsecaseRepos) (entities.Transaction, error) {
	ret := _m.Called(ctx, input, repo)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transactions.CreateTransactionInput, *transactions.TransactionsUsecaseRepos) (entities.Transaction, error)); ok {
		return rf(ctx, input, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transactions.CreateTransactionInput, *transactions.TransactionsUsecaseRepos) entities.Transaction); ok {
		r0 = rf(ctx, input, repo)
	} else {
		r0 = ret.Get(0).(entities.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transactions.CreateTransactionInput, *transactions.TransactionsUsecaseRepos) error); ok {
		r1 = rf(ctx, input, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type Usecase_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - input *transactions.CreateTransactionInput
//   - repo *transactions.TransactionsUsecaseRepos
func (_e *Usecase_Expecter) CreateTransaction(ctx interface{}, input interface{}, repo interface{}) *Usecase_CreateTransaction_Call {
	return &Usecase_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, input, repo)}
}

func (_c *Usecase_CreateTransaction_Call) Run(run func(ctx context.Context, input *transactions.CreateTransactionInput, repo *transactions.TransactionsUsecaseRepos)) *Usecase_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*transactions.CreateTransactionInput), args[2].(*transactions.TransactionsUsecaseRepos))
	})
	return _c
}

func (_c *Usecase_CreateTransaction_Call) Return(_a0 entities.Transaction, _a1 error) *Usecase_CreateTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_CreateTransaction_Call) RunAndReturn(run func(context.Context, *transactions.CreateTransactionInput, *transactions.TransactionsUsecaseRepos) (entities.Transaction, error)) *Usecase_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, input, repo
func (_m *Usecase) GetAccount(ctx context.Context, input *accounts.GetAcccountInput, repo *accounts.AccountUsecaseRepos) (entities.Account, error) {
	ret := _m.Called(ctx, input, repo)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounts.GetAcccountInput, *accounts.AccountUsecaseRepos) (entities.Account, error)); ok {
		return rf(ctx, input, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounts.GetAcccountInput, *accounts.AccountUsecaseRepos) entities.Account); ok {
		r0 = rf(ctx, input, repo)
	} else {
		r0 = ret.Get(0).(entities.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounts.GetAcccountInput, *accounts.AccountUsecaseRepos) error); ok {
		r1 = rf(ctx, input, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type Usecase_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - input *accounts.GetAcccountInput
//   - repo *accounts.AccountUsecaseRepos
func (_e *Usecase_Expecter) GetAccount(ctx interface{}, input interface{}, repo interface{}) *Usecase_GetAccount_Call {
	return &Usecase_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, input, repo)}
}

func (_c *Usecase_GetAccount_Call) Run(run func(ctx context.Context, input *accounts.GetAcccountInput, repo *accounts.AccountUsecaseRepos)) *Usecase_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounts.GetAcccountInput), args[2].(*accounts.AccountUsecaseRepos))
	})
	return _c
}

func (_c *Usecase_GetAccount_Call) Return(_a0 entities.Account, _a1 error) *Usecase_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_GetAccount_Call) RunAndReturn(run func(context.Context, *accounts.GetAcccountInput, *accounts.AccountUsecaseRepos) (entities.Account, error)) *Usecase_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
