// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/lewis97/TechnicalTask/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// Transactions is an autogenerated mock type for the Transactions type
type Transactions struct {
	mock.Mock
}

type Transactions_Expecter struct {
	mock *mock.Mock
}

func (_m *Transactions) EXPECT() *Transactions_Expecter {
	return &Transactions_Expecter{mock: &_m.Mock}
}

// CreateTransaction provides a mock function with given fields: ctx, transaction
func (_m *Transactions) CreateTransaction(ctx context.Context, transaction entities.Transaction) error {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transactions_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type Transactions_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction entities.Transaction
func (_e *Transactions_Expecter) CreateTransaction(ctx interface{}, transaction interface{}) *Transactions_CreateTransaction_Call {
	return &Transactions_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, transaction)}
}

func (_c *Transactions_CreateTransaction_Call) Run(run func(ctx context.Context, transaction entities.Transaction)) *Transactions_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Transaction))
	})
	return _c
}

func (_c *Transactions_CreateTransaction_Call) Return(_a0 error) *Transactions_CreateTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transactions_CreateTransaction_Call) RunAndReturn(run func(context.Context, entities.Transaction) error) *Transactions_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactions creates a new instance of Transactions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactions(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transactions {
	mock := &Transactions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
