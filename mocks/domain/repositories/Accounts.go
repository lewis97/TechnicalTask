// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/lewis97/TechnicalTask/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Accounts is an autogenerated mock type for the Accounts type
type Accounts struct {
	mock.Mock
}

type Accounts_Expecter struct {
	mock *mock.Mock
}

func (_m *Accounts) EXPECT() *Accounts_Expecter {
	return &Accounts_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: ctx, account
func (_m *Accounts) CreateAccount(ctx context.Context, account entities.Account) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Account) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Accounts_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type Accounts_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - account entities.Account
func (_e *Accounts_Expecter) CreateAccount(ctx interface{}, account interface{}) *Accounts_CreateAccount_Call {
	return &Accounts_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, account)}
}

func (_c *Accounts_CreateAccount_Call) Run(run func(ctx context.Context, account entities.Account)) *Accounts_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Account))
	})
	return _c
}

func (_c *Accounts_CreateAccount_Call) Return(_a0 error) *Accounts_CreateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Accounts_CreateAccount_Call) RunAndReturn(run func(context.Context, entities.Account) error) *Accounts_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, accountID
func (_m *Accounts) GetAccount(ctx context.Context, accountID uuid.UUID) (*entities.Account, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.Account, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.Account); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Accounts_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type Accounts_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID uuid.UUID
func (_e *Accounts_Expecter) GetAccount(ctx interface{}, accountID interface{}) *Accounts_GetAccount_Call {
	return &Accounts_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, accountID)}
}

func (_c *Accounts_GetAccount_Call) Run(run func(ctx context.Context, accountID uuid.UUID)) *Accounts_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Accounts_GetAccount_Call) Return(_a0 *entities.Account, _a1 error) *Accounts_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Accounts_GetAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entities.Account, error)) *Accounts_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountByDoc provides a mock function with given fields: ctx, documentNumber
func (_m *Accounts) GetAccountByDoc(ctx context.Context, documentNumber uint) (*entities.Account, error) {
	ret := _m.Called(ctx, documentNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByDoc")
	}

	var r0 *entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entities.Account, error)); ok {
		return rf(ctx, documentNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entities.Account); ok {
		r0 = rf(ctx, documentNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, documentNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Accounts_GetAccountByDoc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountByDoc'
type Accounts_GetAccountByDoc_Call struct {
	*mock.Call
}

// GetAccountByDoc is a helper method to define mock.On call
//   - ctx context.Context
//   - documentNumber uint
func (_e *Accounts_Expecter) GetAccountByDoc(ctx interface{}, documentNumber interface{}) *Accounts_GetAccountByDoc_Call {
	return &Accounts_GetAccountByDoc_Call{Call: _e.mock.On("GetAccountByDoc", ctx, documentNumber)}
}

func (_c *Accounts_GetAccountByDoc_Call) Run(run func(ctx context.Context, documentNumber uint)) *Accounts_GetAccountByDoc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *Accounts_GetAccountByDoc_Call) Return(_a0 *entities.Account, _a1 error) *Accounts_GetAccountByDoc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Accounts_GetAccountByDoc_Call) RunAndReturn(run func(context.Context, uint) (*entities.Account, error)) *Accounts_GetAccountByDoc_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccounts creates a new instance of Accounts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccounts(t interface {
	mock.TestingT
	Cleanup(func())
}) *Accounts {
	mock := &Accounts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
